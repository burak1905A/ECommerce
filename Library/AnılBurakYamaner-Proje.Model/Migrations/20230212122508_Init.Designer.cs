// <auto-generated />
using System;
using AnılBurakYamaner_Proje.Model.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AnılBurakYamaner_Proje.Model.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230212122508_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Attachment")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayShowcaseContent")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Distributor")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DistributorCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PageTitle")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ShowcaseContent")
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<string>("Slug")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("İmageFile")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Locked")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ParentProductId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CanonicalUrl")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DisplayShowcaseContent")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ShowcaseContent")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Slug")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("İmageFile")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("BuyingPrice")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("SellingPrice")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("abb")
                        .HasColumnType("text");

                    b.Property<bool?>("İsPrimary")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Currencys");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.CurrentAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Balance")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RiskLimit")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("CurrentAccounts");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Maillist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatorIpAddress")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Maillists");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<string>("Birthdate")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<string>("DeviceType")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("District")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("Gender")
                        .HasColumnType("boolean");

                    b.Property<string>("LastMailSentDate")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("MobilePhoneNumber")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("OtherLocation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TaxNumber")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TaxOffice")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TcId")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ZipCode")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AdditionalServiceAmount")
                        .HasColumnType("integer");

                    b.Property<int?>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BankName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ClientIp")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CustomerFirstname")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("CustomerSurname")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<int?>("ExtraInstallment")
                        .HasColumnType("integer");

                    b.Property<int?>("FinalAmount")
                        .HasColumnType("integer");

                    b.Property<int?>("GeneralAmount")
                        .HasColumnType("integer");

                    b.Property<string>("GiftNote")
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<bool?>("HasUserNote")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentGatewayCode")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PaymentGatewayName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PaymentProviderCode")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PaymentProviderName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<bool?>("PaymentStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentTypeName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Referrer")
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<Guid>("ShippingAddressId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ShippingAmount")
                        .HasColumnType("integer");

                    b.Property<string>("ShippingCompanyName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<bool?>("ShippingPaymentType")
                        .HasColumnType("boolean");

                    b.Property<string>("ShippingProviderCode")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ShippingProviderName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ShippingTrackingCode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Source")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TaxAmount")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("UseGiftPackage")
                        .HasColumnType("boolean");

                    b.Property<bool?>("UsePromotion")
                        .HasColumnType("boolean");

                    b.Property<string>("UserAgent")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("İnstallment")
                        .HasColumnType("integer");

                    b.Property<int?>("İnstallmentRate")
                        .HasColumnType("integer");

                    b.Property<int?>("İnvoicePrintCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.OrderAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubLocation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("OrderAddresses");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("varKey")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("varValue")
                        .IsRequired()
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductBarcode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ProductPrice")
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<string>("ProductSku")
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Barcode")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Discount")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Gift")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Price1")
                        .HasColumnType("integer");

                    b.Property<string>("ProductDetail")
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<int?>("ProductPrice")
                        .HasColumnType("integer");

                    b.Property<string>("Sku")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Slug")
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("StockAmount")
                        .HasColumnType("integer");

                    b.Property<string>("Tax")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Warranty")
                        .HasColumnType("integer");

                    b.Property<string>("isGifted")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.ProductComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("isAnonymous")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductComments");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Details")
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<string>("ExtraDetails")
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Sku")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("DirectoryName")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Revision")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.ProductPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Price")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.ShippingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("character varying(65535)")
                        .HasMaxLength(65535);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubLocation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("ShippingAddresses");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Town", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastIPAddress")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedComputerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedIP")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("701c99ed-d446-472f-a53d-31dde4605a15"),
                            Email = "admin@admin.com",
                            FirstName = "admin",
                            ImageUrl = "/",
                            LastIPAddress = "127.0.0.1",
                            LastName = "admin",
                            Password = "123",
                            Status = 1,
                            Title = "Admin"
                        });
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Brand", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserBrand")
                        .WithMany("CreatedUserBrands")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserBrand")
                        .WithMany("ModifiedUserBrands")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Cart", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserCart")
                        .WithMany("CreatedUserCarts")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserCart")
                        .WithMany("ModifiedUserCarts")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.CartItem", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserCartItem")
                        .WithMany("CreatedUserCartItems")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserCartItem")
                        .WithMany("ModifiedUserCartItems")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Category", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserCategory")
                        .WithMany("CreatedUserCategories")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserCategory")
                        .WithMany("ModifiedUserCategories")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Country", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserCountry")
                        .WithMany("CreatedUserCountries")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserCountry")
                        .WithMany("ModifiedUserCountries")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Currency", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserCurrency")
                        .WithMany("CreatedUserCurrencys")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserCurrency")
                        .WithMany("ModifiedUserCurrencys")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.CurrentAccount", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserCurrentAccount")
                        .WithMany("CreatedUserCurrentAccounts")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Member", "Member")
                        .WithMany("CurrentAccounts")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserCurrentAccount")
                        .WithMany("ModifiedUserCurrentAccounts")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Location", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Country", "Country")
                        .WithMany("Locations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserLocation")
                        .WithMany("CreatedUserLocations")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserLocation")
                        .WithMany("ModifiedUserLocations")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Maillist", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserMaillist")
                        .WithMany("CreatedUserMaillists")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserMaillist")
                        .WithMany("ModifiedUserMaillists")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Member", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Country", "Country")
                        .WithMany("Members")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserMember")
                        .WithMany("CreatedUserMembers")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Location", "Location")
                        .WithMany("Members")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserMember")
                        .WithMany("ModifiedUserMembers")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Order", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserOrder")
                        .WithMany("CreatedUserOrders")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserOrder")
                        .WithMany("ModifiedUserOrders")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.ShippingAddress", "ShippingAddress")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.OrderAddress", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserOrderAddress")
                        .WithMany("CreatedUserOrderAddresses")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserOrderAddress")
                        .WithMany("ModifiedUserOrderAddresses")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.OrderDetail", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserOrderDetail")
                        .WithMany("CreatedUserOrderDetails")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserOrderDetail")
                        .WithMany("ModifiedUserOrderDetails")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.OrderItem", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserOrderItem")
                        .WithMany("CreatedUserOrderItems")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserOrderItem")
                        .WithMany("ModifiedUserOrderItems")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Product", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserProduct")
                        .WithMany("CreatedUserProducts")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Currency", null)
                        .WithMany("Products")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserProduct")
                        .WithMany("ModifiedUserProducts")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.ProductComment", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserProductComment")
                        .WithMany("CreatedUserProductComments")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Member", "Member")
                        .WithMany("ProductComments")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserProductComment")
                        .WithMany("ModifiedUserProductComments")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Product", "Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.ProductDetail", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserProductDetail")
                        .WithMany("CreatedUserProductDetails")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserProductDetail")
                        .WithMany("ModifiedUserProductDetails")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.ProductImage", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserProductImage")
                        .WithMany("CreatedUserProductImages")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserProductImage")
                        .WithMany("ModifiedUserProductImages")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.ProductPrice", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserProductPrice")
                        .WithMany("CreatedUserProductPrices")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserProductPrice")
                        .WithMany("ModifiedUserProductPrices")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.ShippingAddress", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserShippingAddress")
                        .WithMany("CreatedUserShippingAddresses")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserShippingAddress")
                        .WithMany("ModifiedUserShippingAddresses")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.Town", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUserTown")
                        .WithMany("CreatedUserTowns")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.Location", "Location")
                        .WithMany("Towns")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUserTown")
                        .WithMany("ModifiedUserTowns")
                        .HasForeignKey("ModifiedUserId");
                });

            modelBuilder.Entity("AnılBurakYamaner_Proje.Model.Entities.User", b =>
                {
                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "CreatedUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("AnılBurakYamaner_Proje.Model.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedUsers")
                        .HasForeignKey("ModifiedUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
